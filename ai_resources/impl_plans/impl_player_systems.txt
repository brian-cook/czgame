# Player Systems Implementation Plan

## 1. Base Player Scene Structure
```gdscript
# /src/scenes/player/player.tscn
- CharacterBody2D (root)
  - Sprite2D (player_sprite)
  - CollisionShape2D (collision)
  - Camera2D (follow_camera)
  - WeaponMount (Node2D)
  - Components
    - HealthComponent
    - MovementComponent
    - ExperienceComponent
    - ResourceCollectorComponent
    - ZonePlacementComponent
    - EffectManagerComponent
  - Areas
    - HurtboxComponent (Area2D)
    - PickupArea (Area2D)
  - UI
    - FloatingHealthBar
    - LevelIndicator
```

## 2. Player Controller
```gdscript
# /src/scripts/player/player_controller.gd
class_name PlayerController
extends CharacterBody2D

@export_group("Movement")
@export var base_speed: float = 300.0
@export var acceleration: float = 2000.0
@export var friction: float = 1000.0

@export_group("Components")
@export var health_component: HealthComponent
@export var movement_component: MovementComponent
@export var experience_component: ExperienceComponent
@export var zone_placement: ZonePlacementComponent

# Component references
@onready var weapon_mount: Node2D = $WeaponMount
@onready var sprite: Sprite2D = $Sprite2D
@onready var effect_manager: EffectManagerComponent = $Components/EffectManager

# State tracking
var is_active: bool = true
var current_speed: float = 0.0
var input_vector: Vector2 = Vector2.ZERO

func _ready() -> void:
    _connect_signals()
    _initialize_components()

func _physics_process(delta: float) -> void:
    if not is_active:
        return
        
    _handle_input()
    _update_movement(delta)
    _update_weapon_rotation()

func _handle_input() -> void:
    input_vector = Input.get_vector(
        "move_left", "move_right",
        "move_up", "move_down"
    ).normalized()

func _update_movement(delta: float) -> void:
    if input_vector != Vector2.ZERO:
        velocity = velocity.move_toward(
            input_vector * base_speed,
            acceleration * delta
        )
    else:
        velocity = velocity.move_toward(
            Vector2.ZERO,
            friction * delta
        )
    
    move_and_slide()
    _update_animation()

func _update_weapon_rotation() -> void:
    if weapon_mount:
        weapon_mount.look_at(get_global_mouse_position())

func _update_animation() -> void:
    if velocity.length() > 0:
        sprite.play("run")
        sprite.flip_h = velocity.x < 0
    else:
        sprite.play("idle")

func _connect_signals() -> void:
    health_component.died.connect(_on_death)
    health_component.health_changed.connect(_on_health_changed)
    experience_component.level_up.connect(_on_level_up)
```

## 3. Health Component
```gdscript
# /src/scripts/components/health_component.gd
class_name HealthComponent
extends Node

signal health_changed(new_health: float, max_health: float)
signal damage_taken(amount: float)
signal healed(amount: float)
signal died

@export var max_health: float = 100.0
@export var starting_health: float = 100.0
@export var invincibility_time: float = 0.5

var current_health: float
var is_invincible: bool = false

func _ready() -> void:
    current_health = starting_health

func take_damage(amount: float) -> void:
    if is_invincible:
        return
        
    current_health = max(0, current_health - amount)
    damage_taken.emit(amount)
    health_changed.emit(current_health, max_health)
    
    if current_health <= 0:
        died.emit()
    else:
        _start_invincibility()

func heal(amount: float) -> void:
    var old_health = current_health
    current_health = min(max_health, current_health + amount)
    var actual_heal = current_health - old_health
    
    if actual_heal > 0:
        healed.emit(actual_heal)
        health_changed.emit(current_health, max_health)

func _start_invincibility() -> void:
    is_invincible = true
    await get_tree().create_timer(invincibility_time).timeout
    is_invincible = false
```

## 4. Experience Component
```gdscript
# /src/scripts/components/experience_component.gd
class_name ExperienceComponent
extends Node

signal experience_gained(amount: float)
signal level_up(new_level: int)

@export var experience_curve: Curve
@export var max_level: int = 50

var current_level: int = 1
var current_experience: float = 0.0

func add_experience(amount: float) -> void:
    if current_level >= max_level:
        return
        
    current_experience += amount
    experience_gained.emit(amount)
    
    while _check_level_up():
        _level_up()

func get_experience_to_next_level() -> float:
    return _get_level_requirement(current_level + 1) - current_experience

func _check_level_up() -> bool:
    if current_level >= max_level:
        return false
    return current_experience >= _get_level_requirement(current_level + 1)

func _level_up() -> void:
    current_level += 1
    level_up.emit(current_level)

func _get_level_requirement(level: int) -> float:
    return 100.0 * experience_curve.sample(float(level) / max_level)
```

## 5. Zone Placement Component
```gdscript
# /src/scripts/components/zone_placement_component.gd
class_name ZonePlacementComponent
extends Node2D

signal zone_preview_updated(position: Vector2)
signal zone_placement_validated(is_valid: bool)
signal zone_placed(zone: Node2D)

@export var preview_scene: PackedScene
@export var zone_scene: PackedScene
@export var min_distance_between_zones: float = 200.0
@export var max_zones: int = 3

var active_zones: Array[Node2D] = []
var preview_instance: Node2D
var can_place: bool = true

func _ready() -> void:
    _create_preview()

func _process(_delta: float) -> void:
    if preview_instance:
        var mouse_pos = get_global_mouse_position()
        preview_instance.global_position = mouse_pos
        var is_valid = _validate_placement(mouse_pos)
        preview_instance.modulate = Color.GREEN if is_valid else Color.RED
        zone_placement_validated.emit(is_valid)

func _unhandled_input(event: InputEvent) -> void:
    if event.is_action_pressed("place_zone"):
        _try_place_zone()

func _try_place_zone() -> void:
    if not can_place:
        return
        
    var pos = get_global_mouse_position()
    if _validate_placement(pos):
        var zone = zone_scene.instantiate()
        get_parent().add_child(zone)
        zone.global_position = pos
        active_zones.append(zone)
        zone_placed.emit(zone)
        
        if active_zones.size() >= max_zones:
            can_place = false
```

## 6. Resource Collector Component
```gdscript
# /src/scripts/components/resource_collector_component.gd
class_name ResourceCollectorComponent
extends Node2D

signal resource_collected(type: String, amount: int)

@export var collection_radius: float = 50.0
@export var attraction_radius: float = 150.0
@export var attraction_speed: float = 400.0

@onready var collection_area: Area2D = $CollectionArea
@onready var attraction_area: Area2D = $AttractionArea

func _ready() -> void:
    _setup_areas()
    collection_area.area_entered.connect(_on_resource_entered)
    attraction_area.area_entered.connect(_on_resource_attracted)

func _setup_areas() -> void:
    var collection_shape = CircleShape2D.new()
    collection_shape.radius = collection_radius
    collection_area.get_node("CollisionShape2D").shape = collection_shape
    
    var attraction_shape = CircleShape2D.new()
    attraction_shape.radius = attraction_radius
    attraction_area.get_node("CollisionShape2D").shape = attraction_shape
```

## 7. Testing Implementation

1. Create test scenes:
```gdscript
# /src/tests/player_test.tscn
- Node2D (root)
  - PlayerController
  - TestResources
  - TestEnemies
  - PerformanceMonitor
  - TestUI
    - HealthBar
    - ExperienceBar
    - LevelDisplay
    - ZoneCounter
```

2. Test scenarios:
- Movement and collision
- Health and damage
- Experience gain and leveling
- Zone placement validation
- Resource collection
- Component interaction
- Performance under load

## Next Steps

1. Implement Weapon System
2. Create Comfort Zone base functionality
3. Develop Enemy AI
4. Set up Resource spawning

Would you like me to continue with any of these next steps? 